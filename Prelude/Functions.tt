<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
    IEnumerable<string> GetOrderedPartitionsOf(int totalTypes, Func<int, string> transform) {
        IEnumerable<IEnumerable<IEnumerable<T>>> GetAllOrderedPartitionsN<T>(ICollection<T> items, int totalPartitions) =>
            totalPartitions < 2
            ? Enumerable.Repeat(Enumerable.Repeat(items, 1), 1)
            : from index in Enumerable.Range(0, items.Count + 1)
                let start = Enumerable.Repeat(items.Take(index), 1)
                from end in GetAllOrderedPartitionsN(items.Skip(index).ToList(), totalPartitions - 1)
                select start.Concat(end);

        var items = Enumerable.Range(1, totalTypes).ToArray();

        return
            from text in
                from i in Enumerable.Range(1, items.Length)
                from partitions in GetAllOrderedPartitionsN(items, i)
                let partition = partitions.Select(Enumerable.ToArray)
                where partition.All(a => a.Length >= 1 && a.Length <= totalTypes)
                where partition.Any(a => a.Length != 1)
                select
                    from part in partition
                    let transformed =
                        from index in part
                        select transform(index)
                    let innerStrings = string.Join(", ", transformed)
                    let stringFormat = part.Length == 1 ? "{0}" : "({0})"
                    select string.Format(stringFormat, string.Join(", ", innerStrings))
            select string.Join(", ", text);
    }
#>
using System;
using System.Runtime.CompilerServices;

namespace Maat.Functional {
    public static partial class Functions {
<# for (int count = 1; count <= 10; count++) {
        string Transform(int count, string joinString, Func<int, string> transform) =>
            string.Join(joinString, Enumerable.Range(1, count).Select(transform));

        string AsUncurried(int count) => 
            Transform(count, ", ", i => $"T{i}");

        if (count > 1) {
#>
        [MethodImpl(Aggressive)]
        public static <#= string.Join("", Enumerable.Range(1, count).Select(i => $"Func<T{i}, ")) #>T<#= count + 1 #><#= new string('>', count) #> Curry<<#= string.Join(", ", Enumerable.Range(1, count + 1).Select(i => "T" + i)) #>>(this Func<<#= AsUncurried(count + 1) #>> function) =>
          <#= string.Join("", Enumerable.Range(1, count).Select(i => $"x{i} => ")) #>function(<#= string.Join(", ", Enumerable.Range(1, count).Select(i => $"x{i}")) #>);

        [MethodImpl(Aggressive)]
        public static Func<<#= string.Join(", ", Enumerable.Range(1, count + 1).Select(i => $"T{i}")) #>> Uncurry<<#= string.Join(", ", Enumerable.Range(1, count + 1).Select(i => "T" + i)) #>>(this <#= string.Join("", Enumerable.Range(1, count).Select(i => $"Func<T{i}, ")) #>T<#= count + 1 #><#= new string('>', count) #> function) =>
          (<#= string.Join(", ", Enumerable.Range(1, count).Select(i => $"x{i}")) #>) => function<#= string.Join("", Enumerable.Range(1, count).Select(i => $"(x{i})")) #>;

        [MethodImpl(Aggressive)]
        public static Func<T1, T<#= count + 2 #>> ComposeWith<<#= AsUncurried(count + 2) #>>(this Func<T1, T2> func1, <#= Transform(count, ", ", i => $"Func<T{i+1}, T{i+2}> func{i+1}") #>) =>
            func1
            <#= Transform(count, "\n            ", i => $".ComposeWith(func{i+1})") #>;

        [MethodImpl(Aggressive)]
        public static Func<T<#= count + 1 #>> ComposeWith<<#= AsUncurried(count + 1) #>>(this Func<T1> func, <#= Transform(count, ", ", i => $"Func<T{i}, T{i+1}> func{i}") #>) =>
            func
            <#= Transform(count, "\n            ", i => $".ComposeWith(func{i})") #>;

        [MethodImpl(Aggressive)]
        public static Func<(<#= AsUncurried(count) #>), T<#= count + 1 #>> Entuple<<#= AsUncurried(count + 1) #>>(this Func<<#= AsUncurried(count + 1) #>> function) =>
            x => function(<#= Transform(count, ", ", i => $"x.Item{i}") #>);
        
<# } #>
        [MethodImpl(Aggressive)]
        public static Func<T<#= count + 1#>> Defer<<#= AsUncurried(count + 1) #>>(this Func<<#= AsUncurried(count + 1) #>> function, <#= Transform(count, ", ", i => $"T{i} x{i}") #>) =>
            () => function(<#= Transform(count, ", ", i => $"x{i}") #>);

        [MethodImpl(Aggressive)]
        public static Action<<#= AsUncurried(count) #>> Ignore<<#= AsUncurried(count) #>>(Action action) =>
            (<#= string.Join(", ", Enumerable.Range(1, count).Select(i => new string('_', i))) #>) => action();

<# } #>
    }
}